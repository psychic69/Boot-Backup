Command to get the current information:

lsblk -b -P -o NAME,UUID,FSTYPE,SIZE,MOUNTPOINT,LABEL,TRAN
This is now bytes.  Will need bytes to gig conversion for human readable.


/dev/disk/by-uuid/

backup:  91FC-86D8
active:  D467-DF06

fatlabel /dev/sdXN "NEW_LABEL"

test:
    fatlabel /dev/disk/by-uuid/91FC-86D8 "UNRAID_DR"

    Current mountpoint is /boot and label UNRAID


PSEUDOCODE:

The labels for the array (current_drive_state) will be the first row from the file ./test-lsblk and will be loaded into variable current_drive_headers

    First function, initial_test

    1. load file ./test-lsblk  into an array (current_drive_state) ignoring the first row which is the header/   current drive headers will be used for lookup to index the column in the array. So the header location will dictate the column to index.
    2. Create a function print_partition_state which takes a row from the current drive state as input and prints the following:
        Drive location: [strip all characters before sd*.  Put in temp variable stripped_partition and then print as /dev/$stripped_partition]
        Current Mountpoint: MOUNTPOINT
        UUID: UUID
        File type: FSTYPE
        Current Label: LABEL
        Drive Size: SIZE
        File Type: TRAN
     a.  Add a function convert_bytes_to_human to convert SIZE from bytes to G (gigabytes) and have precision of 2 and have actual bytes  in (actual bytesunconverted) bytes 

    2. Check to see if there is one and only one LABEL (column 6) UNRAID and in NAME (col 1) the final digit is 1.
        
        a. If not, print all rows matching UNRAID, send them to function print_partition_state.    Print this error first: "Error: You have multiple partitions with the label: UNRAID.  You must only have one or the system may not boot properly.  Please resolve"
        b. exit with error
    3.  There is one partition with LABEL UNRAID.
       a. Print "The current booted environment is as follows"
       b. Send the current row index with LABEL UNRAID to print_partition_state

       c.  OK made it here make sure that the current booted UNRAID is at /boot.   If not error out and say  "Error:  Currently Label is UNRAID, however mount point is not /boot: $mountpoint"

    4. Scan the drives again and look for partition label = "UNRAID_CLONE"
      a.  If it exists jump to function clone_backup{}   If it does not exist jumpt to function find_and_prepare_clone{}

    5.  Funtion find_and_prepare_clone:
       